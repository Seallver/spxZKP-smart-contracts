"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pino-abstract-transport";
exports.ids = ["vendor-chunks/pino-abstract-transport"];
exports.modules = {

/***/ "(ssr)/./node_modules/pino-abstract-transport/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/pino-abstract-transport/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst metadata = Symbol.for(\"pino.metadata\");\nconst split = __webpack_require__(/*! split2 */ \"(ssr)/./node_modules/split2/index.js\");\nconst { Duplex } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst { parentPort, workerData } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    promise.resolve = resolve;\n    promise.reject = reject;\n    return promise;\n}\nmodule.exports = function build(fn, opts = {}) {\n    const waitForConfig = opts.expectPinoConfig === true && workerData?.workerData?.pinoWillSendConfig === true;\n    const parseLines = opts.parse === \"lines\";\n    const parseLine = typeof opts.parseLine === \"function\" ? opts.parseLine : JSON.parse;\n    const close = opts.close || defaultClose;\n    const stream = split(function(line) {\n        let value;\n        try {\n            value = parseLine(line);\n        } catch (error) {\n            this.emit(\"unknown\", line, error);\n            return;\n        }\n        if (value === null) {\n            this.emit(\"unknown\", line, \"Null value ignored\");\n            return;\n        }\n        if (typeof value !== \"object\") {\n            value = {\n                data: value,\n                time: Date.now()\n            };\n        }\n        if (stream[metadata]) {\n            stream.lastTime = value.time;\n            stream.lastLevel = value.level;\n            stream.lastObj = value;\n        }\n        if (parseLines) {\n            return line;\n        }\n        return value;\n    }, {\n        autoDestroy: true\n    });\n    stream._destroy = function(err, cb) {\n        const promise = close(err, cb);\n        if (promise && typeof promise.then === \"function\") {\n            promise.then(cb, cb);\n        }\n    };\n    if (opts.expectPinoConfig === true && workerData?.workerData?.pinoWillSendConfig !== true) {\n        setImmediate(()=>{\n            stream.emit(\"error\", new Error(\"This transport is not compatible with the current version of pino. Please upgrade pino to the latest version.\"));\n        });\n    }\n    if (opts.metadata !== false) {\n        stream[metadata] = true;\n        stream.lastTime = 0;\n        stream.lastLevel = 0;\n        stream.lastObj = null;\n    }\n    if (waitForConfig) {\n        let pinoConfig = {};\n        const configReceived = createDeferred();\n        parentPort.on(\"message\", function handleMessage(message) {\n            if (message.code === \"PINO_CONFIG\") {\n                pinoConfig = message.config;\n                configReceived.resolve();\n                parentPort.off(\"message\", handleMessage);\n            }\n        });\n        Object.defineProperties(stream, {\n            levels: {\n                get () {\n                    return pinoConfig.levels;\n                }\n            },\n            messageKey: {\n                get () {\n                    return pinoConfig.messageKey;\n                }\n            },\n            errorKey: {\n                get () {\n                    return pinoConfig.errorKey;\n                }\n            }\n        });\n        return configReceived.then(finish);\n    }\n    return finish();\n    function finish() {\n        let res = fn(stream);\n        if (res && typeof res.catch === \"function\") {\n            res.catch((err)=>{\n                stream.destroy(err);\n            });\n            // set it to null to not retain a reference to the promise\n            res = null;\n        } else if (opts.enablePipelining && res) {\n            return Duplex.from({\n                writable: stream,\n                readable: res\n            });\n        }\n        return stream;\n    }\n};\nfunction defaultClose(err, cb) {\n    process.nextTick(cb, err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pino-abstract-transport/index.js\n");

/***/ })

};
;