"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-json-rpc-filters";
exports.ids = ["vendor-chunks/eth-json-rpc-filters"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/base-filter-history.js":
/*!******************************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/base-filter-history.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/eth-json-rpc-filters/base-filter.js\");\n// tracks all results ever recorded\nclass BaseFilterWithHistory extends BaseFilter {\n    constructor(){\n        super();\n        this.allResults = [];\n    }\n    async update() {\n        throw new Error(\"BaseFilterWithHistory - no update method specified\");\n    }\n    addResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addResults(newResults);\n    }\n    addInitialResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addInitialResults(newResults);\n    }\n    getAllResults() {\n        return this.allResults;\n    }\n}\nmodule.exports = BaseFilterWithHistory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmFzZS1maWx0ZXItaGlzdG9yeS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0IsbUNBQW1DO0FBQ25DLE1BQU1DLDhCQUE4QkY7SUFFbENHLGFBQWU7UUFDYixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxVQUFVLEdBQUcsRUFBRTtJQUN0QjtJQUVBLE1BQU1DLFNBQVU7UUFDZCxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQUMsV0FBWUMsVUFBVSxFQUFFO1FBQ3RCLElBQUksQ0FBQ0osVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxDQUFDSyxNQUFNLENBQUNEO1FBQ3pDLEtBQUssQ0FBQ0QsV0FBV0M7SUFDbkI7SUFFQUUsa0JBQW1CRixVQUFVLEVBQUU7UUFDN0IsSUFBSSxDQUFDSixVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLENBQUNLLE1BQU0sQ0FBQ0Q7UUFDekMsS0FBSyxDQUFDRSxrQkFBa0JGO0lBQzFCO0lBRUFHLGdCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDUCxVQUFVO0lBQ3hCO0FBRUY7QUFFQVEsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtbmV4dC1hcHAvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmFzZS1maWx0ZXItaGlzdG9yeS5qcz83OWVhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJhc2VGaWx0ZXIgPSByZXF1aXJlKCcuL2Jhc2UtZmlsdGVyJylcblxuLy8gdHJhY2tzIGFsbCByZXN1bHRzIGV2ZXIgcmVjb3JkZWRcbmNsYXNzIEJhc2VGaWx0ZXJXaXRoSGlzdG9yeSBleHRlbmRzIEJhc2VGaWx0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5hbGxSZXN1bHRzID0gW11cbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZSAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYXNlRmlsdGVyV2l0aEhpc3RvcnkgLSBubyB1cGRhdGUgbWV0aG9kIHNwZWNpZmllZCcpXG4gIH1cblxuICBhZGRSZXN1bHRzIChuZXdSZXN1bHRzKSB7XG4gICAgdGhpcy5hbGxSZXN1bHRzID0gdGhpcy5hbGxSZXN1bHRzLmNvbmNhdChuZXdSZXN1bHRzKVxuICAgIHN1cGVyLmFkZFJlc3VsdHMobmV3UmVzdWx0cylcbiAgfVxuXG4gIGFkZEluaXRpYWxSZXN1bHRzIChuZXdSZXN1bHRzKSB7XG4gICAgdGhpcy5hbGxSZXN1bHRzID0gdGhpcy5hbGxSZXN1bHRzLmNvbmNhdChuZXdSZXN1bHRzKVxuICAgIHN1cGVyLmFkZEluaXRpYWxSZXN1bHRzKG5ld1Jlc3VsdHMpXG4gIH1cblxuICBnZXRBbGxSZXN1bHRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hbGxSZXN1bHRzXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VGaWx0ZXJXaXRoSGlzdG9yeSJdLCJuYW1lcyI6WyJCYXNlRmlsdGVyIiwicmVxdWlyZSIsIkJhc2VGaWx0ZXJXaXRoSGlzdG9yeSIsImNvbnN0cnVjdG9yIiwiYWxsUmVzdWx0cyIsInVwZGF0ZSIsIkVycm9yIiwiYWRkUmVzdWx0cyIsIm5ld1Jlc3VsdHMiLCJjb25jYXQiLCJhZGRJbml0aWFsUmVzdWx0cyIsImdldEFsbFJlc3VsdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/base-filter-history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/base-filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/base-filter.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js\")[\"default\"]);\nclass BaseFilter extends SafeEventEmitter {\n    constructor(){\n        super();\n        this.updates = [];\n    }\n    async initialize() {}\n    async update() {\n        throw new Error(\"BaseFilter - no update method specified\");\n    }\n    addResults(newResults) {\n        this.updates = this.updates.concat(newResults);\n        newResults.forEach((result)=>this.emit(\"update\", result));\n    }\n    addInitialResults(newResults) {}\n    getChangesAndClear() {\n        const updates = this.updates;\n        this.updates = [];\n        return updates;\n    }\n}\nmodule.exports = BaseFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmFzZS1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLG1CQUFtQkMsMklBQStDO0FBRXhFLE1BQU1FLG1CQUFtQkg7SUFFdkJJLGFBQWU7UUFDYixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtJQUNuQjtJQUVBLE1BQU1DLGFBQWMsQ0FBQztJQUVyQixNQUFNQyxTQUFVO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUFDLFdBQVlDLFVBQVUsRUFBRTtRQUN0QixJQUFJLENBQUNMLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ00sTUFBTSxDQUFDRDtRQUNuQ0EsV0FBV0UsT0FBTyxDQUFDQyxDQUFBQSxTQUFVLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFVBQVVEO0lBQ25EO0lBRUFFLGtCQUFtQkwsVUFBVSxFQUFFLENBQUM7SUFFaENNLHFCQUFzQjtRQUNwQixNQUFNWCxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixJQUFJLENBQUNBLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLE9BQU9BO0lBQ1Q7QUFFRjtBQUVBWSxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC1uZXh0LWFwcC8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy9iYXNlLWZpbHRlci5qcz9jMmY0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNhZmVFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyJykuZGVmYXVsdFxuXG5jbGFzcyBCYXNlRmlsdGVyIGV4dGVuZHMgU2FmZUV2ZW50RW1pdHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnVwZGF0ZXMgPSBbXVxuICB9XG5cbiAgYXN5bmMgaW5pdGlhbGl6ZSAoKSB7fVxuXG4gIGFzeW5jIHVwZGF0ZSAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYXNlRmlsdGVyIC0gbm8gdXBkYXRlIG1ldGhvZCBzcGVjaWZpZWQnKVxuICB9XG5cbiAgYWRkUmVzdWx0cyAobmV3UmVzdWx0cykge1xuICAgIHRoaXMudXBkYXRlcyA9IHRoaXMudXBkYXRlcy5jb25jYXQobmV3UmVzdWx0cylcbiAgICBuZXdSZXN1bHRzLmZvckVhY2gocmVzdWx0ID0+IHRoaXMuZW1pdCgndXBkYXRlJywgcmVzdWx0KSlcbiAgfVxuXG4gIGFkZEluaXRpYWxSZXN1bHRzIChuZXdSZXN1bHRzKSB7fVxuXG4gIGdldENoYW5nZXNBbmRDbGVhciAoKSB7XG4gICAgY29uc3QgdXBkYXRlcyA9IHRoaXMudXBkYXRlc1xuICAgIHRoaXMudXBkYXRlcyA9IFtdXG4gICAgcmV0dXJuIHVwZGF0ZXNcbiAgfVxuICBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlRmlsdGVyXG4iXSwibmFtZXMiOlsiU2FmZUV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJkZWZhdWx0IiwiQmFzZUZpbHRlciIsImNvbnN0cnVjdG9yIiwidXBkYXRlcyIsImluaXRpYWxpemUiLCJ1cGRhdGUiLCJFcnJvciIsImFkZFJlc3VsdHMiLCJuZXdSZXN1bHRzIiwiY29uY2F0IiwiZm9yRWFjaCIsInJlc3VsdCIsImVtaXQiLCJhZGRJbml0aWFsUmVzdWx0cyIsImdldENoYW5nZXNBbmRDbGVhciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/base-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/block-filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/block-filter.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass BlockFilter extends BaseFilter {\n    constructor({ provider, params }){\n        super();\n        this.type = \"block\";\n        this.provider = provider;\n    }\n    async update({ oldBlock, newBlock }) {\n        const toBlock = newBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blockBodies = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockHashes = blockBodies.map((block)=>block.hash);\n        this.addResults(blockHashes);\n    }\n}\nmodule.exports = BlockFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmxvY2stZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsZUFBZSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRXBDLE1BQU1HLG9CQUFvQko7SUFFeEJLLFlBQWEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUUsQ0FBRTtRQUNqQyxLQUFLO1FBQ0wsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLFFBQVEsR0FBR0E7SUFDbEI7SUFFQSxNQUFNRyxPQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFLEVBQUU7UUFDcEMsTUFBTUMsVUFBVUQ7UUFDaEIsTUFBTUUsWUFBWVYsZ0JBQWdCTztRQUNsQyxNQUFNSSxjQUFjLE1BQU1aLGtCQUFrQjtZQUFFSSxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUFFTztZQUFXRDtRQUFRO1FBQzFGLE1BQU1HLGNBQWNELFlBQVlFLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNQyxJQUFJO1FBQ3pELElBQUksQ0FBQ0MsVUFBVSxDQUFDSjtJQUNsQjtBQUVGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC1uZXh0LWFwcC8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy9ibG9jay1maWx0ZXIuanM/YjZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9iYXNlLWZpbHRlcicpXG5jb25zdCBnZXRCbG9ja3NGb3JSYW5nZSA9IHJlcXVpcmUoJy4vZ2V0QmxvY2tzRm9yUmFuZ2UnKVxuY29uc3QgeyBpbmNyZW1lbnRIZXhJbnQgfSA9IHJlcXVpcmUoJy4vaGV4VXRpbHMnKVxuXG5jbGFzcyBCbG9ja0ZpbHRlciBleHRlbmRzIEJhc2VGaWx0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICh7IHByb3ZpZGVyLCBwYXJhbXMgfSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnR5cGUgPSAnYmxvY2snXG4gICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKHsgb2xkQmxvY2ssIG5ld0Jsb2NrIH0pIHtcbiAgICBjb25zdCB0b0Jsb2NrID0gbmV3QmxvY2tcbiAgICBjb25zdCBmcm9tQmxvY2sgPSBpbmNyZW1lbnRIZXhJbnQob2xkQmxvY2spXG4gICAgY29uc3QgYmxvY2tCb2RpZXMgPSBhd2FpdCBnZXRCbG9ja3NGb3JSYW5nZSh7IHByb3ZpZGVyOiB0aGlzLnByb3ZpZGVyLCBmcm9tQmxvY2ssIHRvQmxvY2sgfSlcbiAgICBjb25zdCBibG9ja0hhc2hlcyA9IGJsb2NrQm9kaWVzLm1hcCgoYmxvY2spID0+IGJsb2NrLmhhc2gpXG4gICAgdGhpcy5hZGRSZXN1bHRzKGJsb2NrSGFzaGVzKVxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja0ZpbHRlclxuIl0sIm5hbWVzIjpbIkJhc2VGaWx0ZXIiLCJyZXF1aXJlIiwiZ2V0QmxvY2tzRm9yUmFuZ2UiLCJpbmNyZW1lbnRIZXhJbnQiLCJCbG9ja0ZpbHRlciIsImNvbnN0cnVjdG9yIiwicHJvdmlkZXIiLCJwYXJhbXMiLCJ0eXBlIiwidXBkYXRlIiwib2xkQmxvY2siLCJuZXdCbG9jayIsInRvQmxvY2siLCJmcm9tQmxvY2siLCJibG9ja0JvZGllcyIsImJsb2NrSGFzaGVzIiwibWFwIiwiYmxvY2siLCJoYXNoIiwiYWRkUmVzdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/block-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/getBlocksForRange.js":
/*!****************************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/getBlocksForRange.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = getBlocksForRange;\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n    if (!fromBlock) fromBlock = toBlock;\n    const fromBlockNumber = hexToInt(fromBlock);\n    const toBlockNumber = hexToInt(toBlock);\n    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n    // load all blocks from old to new (inclusive)\n    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index)=>fromBlockNumber + index).map(intToHex);\n    let blockBodies = await Promise.all(missingBlockNumbers.map((blockNum)=>query(provider, \"eth_getBlockByNumber\", [\n            blockNum,\n            false\n        ])));\n    blockBodies = blockBodies.filter((block)=>block !== null);\n    return blockBodies;\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    const hexString = int.toString(16);\n    return \"0x\" + hexString;\n}\nfunction sendAsync(provider, request) {\n    return new Promise((resolve, reject)=>{\n        provider.sendAsync(request, (error, response)=>{\n            if (error) {\n                reject(error);\n            } else if (response.error) {\n                reject(response.error);\n            } else if (response.result) {\n                resolve(response.result);\n            } else {\n                reject(new Error(\"Result was empty\"));\n            }\n        });\n    });\n}\nasync function query(provider, method, params) {\n    for(let i = 0; i < 3; i++){\n        try {\n            return await sendAsync(provider, {\n                id: 1,\n                jsonrpc: \"2.0\",\n                method,\n                params\n            });\n        } catch (error) {\n            console.error(`provider.sendAsync failed: ${error.stack || error.message || error}`);\n        }\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvZ2V0QmxvY2tzRm9yUmFuZ2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGVBQWVBLGtCQUFrQixFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO0lBQy9ELElBQUksQ0FBQ0QsV0FBV0EsWUFBWUM7SUFFNUIsTUFBTUMsa0JBQWtCQyxTQUFTSDtJQUNqQyxNQUFNSSxnQkFBZ0JELFNBQVNGO0lBQy9CLE1BQU1JLG9CQUFvQkQsZ0JBQWdCRixrQkFBa0I7SUFDNUQsOENBQThDO0lBQzlDLE1BQU1JLHNCQUFzQkMsTUFBTUYsbUJBQW1CRyxJQUFJLEdBQzVCQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRUMsUUFBVVQsa0JBQWtCUyxPQUNuQ0YsR0FBRyxDQUFDRztJQUNqQyxJQUFJQyxjQUFjLE1BQU1DLFFBQVFDLEdBQUcsQ0FDakNULG9CQUFvQkcsR0FBRyxDQUFDTyxDQUFBQSxXQUFZQyxNQUFNbEIsVUFBVSx3QkFBd0I7WUFBQ2lCO1lBQVU7U0FBTTtJQUUvRkgsY0FBY0EsWUFBWUssTUFBTSxDQUFDQyxDQUFBQSxRQUFTQSxVQUFVO0lBQ3BELE9BQU9OO0FBQ1Q7QUFFQSxTQUFTVixTQUFTaUIsU0FBUztJQUN6QixJQUFJQSxjQUFjQyxhQUFhRCxjQUFjLE1BQU0sT0FBT0E7SUFDMUQsT0FBT0UsT0FBT0MsUUFBUSxDQUFDSCxXQUFXO0FBQ3BDO0FBRUEsU0FBU0ksZ0JBQWdCSixTQUFTO0lBQ2hDLElBQUlBLGNBQWNDLGFBQWFELGNBQWMsTUFBTSxPQUFPQTtJQUMxRCxNQUFNSyxRQUFRdEIsU0FBU2lCO0lBQ3ZCLE9BQU9SLFNBQVNhLFFBQVE7QUFDMUI7QUFFQSxTQUFTYixTQUFTYyxHQUFHO0lBQ25CLElBQUlBLFFBQVFMLGFBQWFLLFFBQVEsTUFBTSxPQUFPQTtJQUM5QyxNQUFNTixZQUFZTSxJQUFJQyxRQUFRLENBQUM7SUFDL0IsT0FBTyxPQUFPUDtBQUNoQjtBQUVBLFNBQVNRLFVBQVU3QixRQUFRLEVBQUU4QixPQUFPO0lBQ2xDLE9BQU8sSUFBSWYsUUFBUSxDQUFDZ0IsU0FBU0M7UUFDM0JoQyxTQUFTNkIsU0FBUyxDQUFDQyxTQUFTLENBQUNHLE9BQU9DO1lBQ2xDLElBQUlELE9BQU87Z0JBQ1RELE9BQU9DO1lBQ1QsT0FBTyxJQUFJQyxTQUFTRCxLQUFLLEVBQUU7Z0JBQ3pCRCxPQUFPRSxTQUFTRCxLQUFLO1lBQ3ZCLE9BQU8sSUFBSUMsU0FBU0MsTUFBTSxFQUFFO2dCQUMxQkosUUFBUUcsU0FBU0MsTUFBTTtZQUN6QixPQUFPO2dCQUNMSCxPQUFPLElBQUlJLE1BQU07WUFDbkI7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxlQUFlbEIsTUFBTWxCLFFBQVEsRUFBRXFDLE1BQU0sRUFBRUMsTUFBTTtJQUMzQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO1FBQzFCLElBQUk7WUFDRixPQUFPLE1BQU1WLFVBQVU3QixVQUFVO2dCQUMvQndDLElBQUk7Z0JBQ0pDLFNBQVM7Z0JBQ1RKO2dCQUNBQztZQUNGO1FBQ0YsRUFBRSxPQUFPTCxPQUFPO1lBQ2RTLFFBQVFULEtBQUssQ0FDWCxDQUFDLDJCQUEyQixFQUFFQSxNQUFNVSxLQUFLLElBQUlWLE1BQU1XLE9BQU8sSUFBSVgsTUFBTSxDQUFDO1FBRXpFO0lBQ0Y7SUFDQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLW5leHQtYXBwLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2dldEJsb2Nrc0ZvclJhbmdlLmpzP2U0MDQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBnZXRCbG9ja3NGb3JSYW5nZVxuXG5hc3luYyBmdW5jdGlvbiBnZXRCbG9ja3NGb3JSYW5nZSh7IHByb3ZpZGVyLCBmcm9tQmxvY2ssIHRvQmxvY2sgfSkge1xuICBpZiAoIWZyb21CbG9jaykgZnJvbUJsb2NrID0gdG9CbG9ja1xuXG4gIGNvbnN0IGZyb21CbG9ja051bWJlciA9IGhleFRvSW50KGZyb21CbG9jaylcbiAgY29uc3QgdG9CbG9ja051bWJlciA9IGhleFRvSW50KHRvQmxvY2spXG4gIGNvbnN0IGJsb2NrQ291bnRUb1F1ZXJ5ID0gdG9CbG9ja051bWJlciAtIGZyb21CbG9ja051bWJlciArIDFcbiAgLy8gbG9hZCBhbGwgYmxvY2tzIGZyb20gb2xkIHRvIG5ldyAoaW5jbHVzaXZlKVxuICBjb25zdCBtaXNzaW5nQmxvY2tOdW1iZXJzID0gQXJyYXkoYmxvY2tDb3VudFRvUXVlcnkpLmZpbGwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoXyxpbmRleCkgPT4gZnJvbUJsb2NrTnVtYmVyICsgaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGludFRvSGV4KVxuICBsZXQgYmxvY2tCb2RpZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBtaXNzaW5nQmxvY2tOdW1iZXJzLm1hcChibG9ja051bSA9PiBxdWVyeShwcm92aWRlciwgJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJywgW2Jsb2NrTnVtLCBmYWxzZV0pKVxuICApXG4gIGJsb2NrQm9kaWVzID0gYmxvY2tCb2RpZXMuZmlsdGVyKGJsb2NrID0+IGJsb2NrICE9PSBudWxsKTtcbiAgcmV0dXJuIGJsb2NrQm9kaWVzXG59XG5cbmZ1bmN0aW9uIGhleFRvSW50KGhleFN0cmluZykge1xuICBpZiAoaGV4U3RyaW5nID09PSB1bmRlZmluZWQgfHwgaGV4U3RyaW5nID09PSBudWxsKSByZXR1cm4gaGV4U3RyaW5nXG4gIHJldHVybiBOdW1iZXIucGFyc2VJbnQoaGV4U3RyaW5nLCAxNilcbn1cblxuZnVuY3Rpb24gaW5jcmVtZW50SGV4SW50KGhleFN0cmluZyl7XG4gIGlmIChoZXhTdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBoZXhTdHJpbmcgPT09IG51bGwpIHJldHVybiBoZXhTdHJpbmdcbiAgY29uc3QgdmFsdWUgPSBoZXhUb0ludChoZXhTdHJpbmcpXG4gIHJldHVybiBpbnRUb0hleCh2YWx1ZSArIDEpXG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBpZiAoaW50ID09PSB1bmRlZmluZWQgfHwgaW50ID09PSBudWxsKSByZXR1cm4gaW50XG4gIGNvbnN0IGhleFN0cmluZyA9IGludC50b1N0cmluZygxNilcbiAgcmV0dXJuICcweCcgKyBoZXhTdHJpbmdcbn1cblxuZnVuY3Rpb24gc2VuZEFzeW5jKHByb3ZpZGVyLCByZXF1ZXN0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcHJvdmlkZXIuc2VuZEFzeW5jKHJlcXVlc3QsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICByZWplY3QocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlJlc3VsdCB3YXMgZW1wdHlcIikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcXVlcnkocHJvdmlkZXIsIG1ldGhvZCwgcGFyYW1zKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBzZW5kQXN5bmMocHJvdmlkZXIsIHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBwcm92aWRlci5zZW5kQXN5bmMgZmFpbGVkOiAke2Vycm9yLnN0YWNrIHx8IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3J9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldEJsb2Nrc0ZvclJhbmdlIiwicHJvdmlkZXIiLCJmcm9tQmxvY2siLCJ0b0Jsb2NrIiwiZnJvbUJsb2NrTnVtYmVyIiwiaGV4VG9JbnQiLCJ0b0Jsb2NrTnVtYmVyIiwiYmxvY2tDb3VudFRvUXVlcnkiLCJtaXNzaW5nQmxvY2tOdW1iZXJzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImluZGV4IiwiaW50VG9IZXgiLCJibG9ja0JvZGllcyIsIlByb21pc2UiLCJhbGwiLCJibG9ja051bSIsInF1ZXJ5IiwiZmlsdGVyIiwiYmxvY2siLCJoZXhTdHJpbmciLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJwYXJzZUludCIsImluY3JlbWVudEhleEludCIsInZhbHVlIiwiaW50IiwidG9TdHJpbmciLCJzZW5kQXN5bmMiLCJyZXF1ZXN0IiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwicmVzcG9uc2UiLCJyZXN1bHQiLCJFcnJvciIsIm1ldGhvZCIsInBhcmFtcyIsImkiLCJpZCIsImpzb25ycGMiLCJjb25zb2xlIiwic3RhY2siLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/getBlocksForRange.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/hexUtils.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    minBlockRef,\n    maxBlockRef,\n    sortBlockRefs,\n    bnToHex,\n    blockRefIsNumber,\n    hexToInt,\n    incrementHexInt,\n    intToHex,\n    unsafeRandomBytes\n};\nfunction minBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[0];\n}\nfunction maxBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[sortedRefs.length - 1];\n}\nfunction sortBlockRefs(refs) {\n    return refs.sort((refA, refB)=>{\n        if (refA === \"latest\" || refB === \"earliest\") return 1;\n        if (refB === \"latest\" || refA === \"earliest\") return -1;\n        return hexToInt(refA) - hexToInt(refB);\n    });\n}\nfunction bnToHex(bn) {\n    return \"0x\" + bn.toString(16);\n}\nfunction blockRefIsNumber(blockRef) {\n    return blockRef && ![\n        \"earliest\",\n        \"latest\",\n        \"pending\"\n    ].includes(blockRef);\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    let hexString = int.toString(16);\n    const needsLeftPad = hexString.length % 2;\n    if (needsLeftPad) hexString = \"0\" + hexString;\n    return \"0x\" + hexString;\n}\nfunction unsafeRandomBytes(byteCount) {\n    let result = \"0x\";\n    for(let i = 0; i < byteCount; i++){\n        result += unsafeRandomNibble();\n        result += unsafeRandomNibble();\n    }\n    return result;\n}\nfunction unsafeRandomNibble() {\n    return Math.floor(Math.random() * 16).toString(16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvaGV4VXRpbHMuanMiLCJtYXBwaW5ncyI6IjtBQUNBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDRjtBQUVBLFNBQVNSLFlBQVksR0FBR1MsSUFBSTtJQUMxQixNQUFNQyxhQUFhUixjQUFjTztJQUNqQyxPQUFPQyxVQUFVLENBQUMsRUFBRTtBQUN0QjtBQUVBLFNBQVNULFlBQVksR0FBR1EsSUFBSTtJQUMxQixNQUFNQyxhQUFhUixjQUFjTztJQUNqQyxPQUFPQyxVQUFVLENBQUNBLFdBQVdDLE1BQU0sR0FBQyxFQUFFO0FBQ3hDO0FBRUEsU0FBU1QsY0FBY08sSUFBSTtJQUN6QixPQUFPQSxLQUFLRyxJQUFJLENBQUMsQ0FBQ0MsTUFBTUM7UUFDdEIsSUFBSUQsU0FBUyxZQUFZQyxTQUFTLFlBQVksT0FBTztRQUNyRCxJQUFJQSxTQUFTLFlBQVlELFNBQVMsWUFBWSxPQUFPLENBQUM7UUFDdEQsT0FBT1IsU0FBU1EsUUFBUVIsU0FBU1M7SUFDbkM7QUFDRjtBQUVBLFNBQVNYLFFBQVFZLEVBQUU7SUFDakIsT0FBTyxPQUFPQSxHQUFHQyxRQUFRLENBQUM7QUFDNUI7QUFFQSxTQUFTWixpQkFBaUJhLFFBQVE7SUFDaEMsT0FBT0EsWUFBWSxDQUFDO1FBQUM7UUFBWTtRQUFVO0tBQVUsQ0FBQ0MsUUFBUSxDQUFDRDtBQUNqRTtBQUVBLFNBQVNaLFNBQVNjLFNBQVM7SUFDekIsSUFBSUEsY0FBY0MsYUFBYUQsY0FBYyxNQUFNLE9BQU9BO0lBQzFELE9BQU9FLE9BQU9DLFFBQVEsQ0FBQ0gsV0FBVztBQUNwQztBQUVBLFNBQVNiLGdCQUFnQmEsU0FBUztJQUNoQyxJQUFJQSxjQUFjQyxhQUFhRCxjQUFjLE1BQU0sT0FBT0E7SUFDMUQsTUFBTUksUUFBUWxCLFNBQVNjO0lBQ3ZCLE9BQU9aLFNBQVNnQixRQUFRO0FBQzFCO0FBRUEsU0FBU2hCLFNBQVNpQixHQUFHO0lBQ25CLElBQUlBLFFBQVFKLGFBQWFJLFFBQVEsTUFBTSxPQUFPQTtJQUM5QyxJQUFJTCxZQUFZSyxJQUFJUixRQUFRLENBQUM7SUFDN0IsTUFBTVMsZUFBZU4sVUFBVVIsTUFBTSxHQUFHO0lBQ3hDLElBQUljLGNBQWNOLFlBQVksTUFBTUE7SUFDcEMsT0FBTyxPQUFPQTtBQUNoQjtBQUVBLFNBQVNYLGtCQUFrQmtCLFNBQVM7SUFDbEMsSUFBSUMsU0FBUztJQUNiLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixXQUFXRSxJQUFLO1FBQ2xDRCxVQUFVRTtRQUNWRixVQUFVRTtJQUNaO0lBQ0EsT0FBT0Y7QUFDVDtBQUVBLFNBQVNFO0lBQ1AsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUssSUFBSWhCLFFBQVEsQ0FBQztBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtbmV4dC1hcHAvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvaGV4VXRpbHMuanM/NTY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW5CbG9ja1JlZixcbiAgbWF4QmxvY2tSZWYsXG4gIHNvcnRCbG9ja1JlZnMsXG4gIGJuVG9IZXgsXG4gIGJsb2NrUmVmSXNOdW1iZXIsXG4gIGhleFRvSW50LFxuICBpbmNyZW1lbnRIZXhJbnQsXG4gIGludFRvSGV4LFxuICB1bnNhZmVSYW5kb21CeXRlcyxcbn1cblxuZnVuY3Rpb24gbWluQmxvY2tSZWYoLi4ucmVmcykge1xuICBjb25zdCBzb3J0ZWRSZWZzID0gc29ydEJsb2NrUmVmcyhyZWZzKVxuICByZXR1cm4gc29ydGVkUmVmc1swXVxufVxuXG5mdW5jdGlvbiBtYXhCbG9ja1JlZiguLi5yZWZzKSB7XG4gIGNvbnN0IHNvcnRlZFJlZnMgPSBzb3J0QmxvY2tSZWZzKHJlZnMpXG4gIHJldHVybiBzb3J0ZWRSZWZzW3NvcnRlZFJlZnMubGVuZ3RoLTFdXG59XG5cbmZ1bmN0aW9uIHNvcnRCbG9ja1JlZnMocmVmcykge1xuICByZXR1cm4gcmVmcy5zb3J0KChyZWZBLCByZWZCKSA9PiB7XG4gICAgaWYgKHJlZkEgPT09ICdsYXRlc3QnIHx8IHJlZkIgPT09ICdlYXJsaWVzdCcpIHJldHVybiAxXG4gICAgaWYgKHJlZkIgPT09ICdsYXRlc3QnIHx8IHJlZkEgPT09ICdlYXJsaWVzdCcpIHJldHVybiAtMVxuICAgIHJldHVybiBoZXhUb0ludChyZWZBKSAtIGhleFRvSW50KHJlZkIpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGJuVG9IZXgoYm4pIHtcbiAgcmV0dXJuICcweCcgKyBibi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gYmxvY2tSZWZJc051bWJlcihibG9ja1JlZil7XG4gIHJldHVybiBibG9ja1JlZiAmJiAhWydlYXJsaWVzdCcsICdsYXRlc3QnLCAncGVuZGluZyddLmluY2x1ZGVzKGJsb2NrUmVmKVxufVxuXG5mdW5jdGlvbiBoZXhUb0ludChoZXhTdHJpbmcpIHtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGhleFN0cmluZywgMTYpXG59XG5cbmZ1bmN0aW9uIGluY3JlbWVudEhleEludChoZXhTdHJpbmcpe1xuICBpZiAoaGV4U3RyaW5nID09PSB1bmRlZmluZWQgfHwgaGV4U3RyaW5nID09PSBudWxsKSByZXR1cm4gaGV4U3RyaW5nXG4gIGNvbnN0IHZhbHVlID0gaGV4VG9JbnQoaGV4U3RyaW5nKVxuICByZXR1cm4gaW50VG9IZXgodmFsdWUgKyAxKVxufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgaWYgKGludCA9PT0gdW5kZWZpbmVkIHx8IGludCA9PT0gbnVsbCkgcmV0dXJuIGludFxuICBsZXQgaGV4U3RyaW5nID0gaW50LnRvU3RyaW5nKDE2KVxuICBjb25zdCBuZWVkc0xlZnRQYWQgPSBoZXhTdHJpbmcubGVuZ3RoICUgMlxuICBpZiAobmVlZHNMZWZ0UGFkKSBoZXhTdHJpbmcgPSAnMCcgKyBoZXhTdHJpbmdcbiAgcmV0dXJuICcweCcgKyBoZXhTdHJpbmdcbn1cblxuZnVuY3Rpb24gdW5zYWZlUmFuZG9tQnl0ZXMoYnl0ZUNvdW50KSB7XG4gIGxldCByZXN1bHQgPSAnMHgnXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZUNvdW50OyBpKyspIHtcbiAgICByZXN1bHQgKz0gdW5zYWZlUmFuZG9tTmliYmxlKClcbiAgICByZXN1bHQgKz0gdW5zYWZlUmFuZG9tTmliYmxlKClcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJhbmRvbU5pYmJsZSgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNilcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWluQmxvY2tSZWYiLCJtYXhCbG9ja1JlZiIsInNvcnRCbG9ja1JlZnMiLCJiblRvSGV4IiwiYmxvY2tSZWZJc051bWJlciIsImhleFRvSW50IiwiaW5jcmVtZW50SGV4SW50IiwiaW50VG9IZXgiLCJ1bnNhZmVSYW5kb21CeXRlcyIsInJlZnMiLCJzb3J0ZWRSZWZzIiwibGVuZ3RoIiwic29ydCIsInJlZkEiLCJyZWZCIiwiYm4iLCJ0b1N0cmluZyIsImJsb2NrUmVmIiwiaW5jbHVkZXMiLCJoZXhTdHJpbmciLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJwYXJzZUludCIsInZhbHVlIiwiaW50IiwibmVlZHNMZWZ0UGFkIiwiYnl0ZUNvdW50IiwicmVzdWx0IiwiaSIsInVuc2FmZVJhbmRvbU5pYmJsZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/index.js":
/*!****************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Mutex = (__webpack_require__(/*! async-mutex */ \"(ssr)/./node_modules/async-mutex/lib/index.js\").Mutex);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./node_modules/json-rpc-engine/dist/index.js\");\nconst LogFilter = __webpack_require__(/*! ./log-filter.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/log-filter.js\");\nconst BlockFilter = __webpack_require__(/*! ./block-filter.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/block-filter.js\");\nconst TxFilter = __webpack_require__(/*! ./tx-filter.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/tx-filter.js\");\nconst { intToHex, hexToInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\");\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n    // create filter collection\n    let filterIndex = 0;\n    let filters = {};\n    // create update mutex\n    const mutex = new Mutex();\n    const waitForFree = mutexMiddlewareWrapper({\n        mutex\n    });\n    const middleware = createScaffoldMiddleware({\n        // install filters\n        eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n        eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n        eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n        // uninstall filters\n        eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n        // checking filter changes\n        eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n        eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n    });\n    // setup filter updating and destroy handler\n    const filterUpdater = async ({ oldBlock, newBlock })=>{\n        if (filters.length === 0) return;\n        // lock update reads\n        const releaseLock = await mutex.acquire();\n        try {\n            // process all filters in parallel\n            await Promise.all(objValues(filters).map(async (filter)=>{\n                try {\n                    await filter.update({\n                        oldBlock,\n                        newBlock\n                    });\n                } catch (err) {\n                    // handle each error individually so filter update errors don't affect other filters\n                    console.error(err);\n                }\n            }));\n        } catch (err) {\n            // log error so we don't skip the releaseLock\n            console.error(err);\n        }\n        // unlock update reads\n        releaseLock();\n    };\n    // expose filter methods directly\n    middleware.newLogFilter = newLogFilter;\n    middleware.newBlockFilter = newBlockFilter;\n    middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n    middleware.uninstallFilter = uninstallFilterHandler;\n    middleware.getFilterChanges = getFilterChanges;\n    middleware.getFilterLogs = getFilterLogs;\n    // expose destroy method for cleanup\n    middleware.destroy = ()=>{\n        uninstallAllFilters();\n    };\n    return middleware;\n    //\n    // new filters\n    //\n    async function newLogFilter(params) {\n        const filter = new LogFilter({\n            provider,\n            params\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newBlockFilter() {\n        const filter = new BlockFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newPendingTransactionFilter() {\n        const filter = new TxFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    //\n    // get filter changes\n    //\n    async function getFilterChanges(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        const results = filter.getChangesAndClear();\n        return results;\n    }\n    async function getFilterLogs(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        // only return results for log filters\n        let results = [];\n        if (filter.type === \"log\") {\n            results = filter.getAllResults();\n        }\n        return results;\n    }\n    //\n    // remove filters\n    //\n    async function uninstallFilterHandler(filterIndexHex) {\n        // check filter exists\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        const result = Boolean(filter);\n        // uninstall filter\n        if (result) {\n            await uninstallFilter(filterIndex);\n        }\n        return result;\n    }\n    //\n    // utils\n    //\n    async function installFilter(filter) {\n        const prevFilterCount = objValues(filters).length;\n        // install filter\n        const currentBlock = await blockTracker.getLatestBlock();\n        await filter.initialize({\n            currentBlock\n        });\n        filterIndex++;\n        filters[filterIndex] = filter;\n        filter.id = filterIndex;\n        filter.idHex = intToHex(filterIndex);\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n        return filterIndex;\n    }\n    async function uninstallFilter(filterIndex) {\n        const prevFilterCount = objValues(filters).length;\n        delete filters[filterIndex];\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n    }\n    async function uninstallAllFilters() {\n        const prevFilterCount = objValues(filters).length;\n        filters = {};\n        // update block tracker subs\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount: 0\n        });\n    }\n    function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n        // subscribe\n        if (prevFilterCount === 0 && newFilterCount > 0) {\n            blockTracker.on(\"sync\", filterUpdater);\n            return;\n        }\n        // unsubscribe\n        if (prevFilterCount > 0 && newFilterCount === 0) {\n            blockTracker.removeListener(\"sync\", filterUpdater);\n            return;\n        }\n    }\n}\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n    return toAsyncRpcMiddleware(async (...args)=>{\n        const filter = await createFilterFn(...args);\n        const result = intToHex(filter.id);\n        return result;\n    });\n}\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n    return createAsyncMiddleware(async (req, res)=>{\n        const result = await asyncFn.apply(null, req.params);\n        res.result = result;\n    });\n}\nfunction mutexMiddlewareWrapper({ mutex }) {\n    return (middleware)=>{\n        return async (req, res, next, end)=>{\n            // wait for mutex available\n            // we can release immediately because\n            // we just need to make sure updates aren't active\n            const releaseLock = await mutex.acquire();\n            releaseLock();\n            middleware(req, res, next, end);\n        };\n    };\n}\nfunction objValues(obj, fn) {\n    const values = [];\n    for(let key in obj){\n        values.push(obj[key]);\n    }\n    return values;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/log-filter.js":
/*!*********************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/log-filter.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EthQuery = __webpack_require__(/*! eth-query */ \"(ssr)/./node_modules/eth-query/index.js\");\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/eth-json-rpc-filters/node_modules/pify/index.js\");\nconst BaseFilterWithHistory = __webpack_require__(/*! ./base-filter-history */ \"(ssr)/./node_modules/eth-json-rpc-filters/base-filter-history.js\");\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass LogFilter extends BaseFilterWithHistory {\n    constructor({ provider, params }){\n        super();\n        this.type = \"log\";\n        this.ethQuery = new EthQuery(provider);\n        this.params = Object.assign({\n            fromBlock: \"latest\",\n            toBlock: \"latest\",\n            address: undefined,\n            topics: []\n        }, params);\n        // normalize address parameter\n        if (this.params.address) {\n            // ensure array\n            if (!Array.isArray(this.params.address)) {\n                this.params.address = [\n                    this.params.address\n                ];\n            }\n            // ensure lowercase\n            this.params.address = this.params.address.map((address)=>address.toLowerCase());\n        }\n    }\n    async initialize({ currentBlock }) {\n        // resolve params.fromBlock\n        let fromBlock = this.params.fromBlock;\n        if ([\n            \"latest\",\n            \"pending\"\n        ].includes(fromBlock)) fromBlock = currentBlock;\n        if (\"earliest\" === fromBlock) fromBlock = \"0x0\";\n        this.params.fromBlock = fromBlock;\n        // set toBlock for initial lookup\n        const toBlock = minBlockRef(this.params.toBlock, currentBlock);\n        const params = Object.assign({}, this.params, {\n            toBlock\n        });\n        // fetch logs and add to results\n        const newLogs = await this._fetchLogs(params);\n        this.addInitialResults(newLogs);\n    }\n    async update({ oldBlock, newBlock }) {\n        // configure params for this update\n        const toBlock = newBlock;\n        let fromBlock;\n        // oldBlock is empty on first sync\n        if (oldBlock) {\n            fromBlock = incrementHexInt(oldBlock);\n        } else {\n            fromBlock = newBlock;\n        }\n        // fetch logs\n        const params = Object.assign({}, this.params, {\n            fromBlock,\n            toBlock\n        });\n        const newLogs = await this._fetchLogs(params);\n        const matchingLogs = newLogs.filter((log)=>this.matchLog(log));\n        // add to results\n        this.addResults(matchingLogs);\n    }\n    async _fetchLogs(params) {\n        const newLogs = await pify((cb)=>this.ethQuery.getLogs(params, cb))();\n        // add to results\n        return newLogs;\n    }\n    matchLog(log) {\n        // check if block number in bounds:\n        if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n        if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;\n        // address is correct:\n        const normalizedLogAddress = log.address && log.address.toLowerCase();\n        if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;\n        // topics match:\n        // topics are position-dependant\n        // topics can be nested to represent `or` [[a || b], c]\n        // topics can be null, representing a wild card for that position\n        const topicsMatch = this.params.topics.every((topicPattern, index)=>{\n            // pattern is longer than actual topics\n            let logTopic = log.topics[index];\n            if (!logTopic) return false;\n            logTopic = logTopic.toLowerCase();\n            // normalize subTopics\n            let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [\n                topicPattern\n            ];\n            // check for wild card\n            const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n            if (subtopicsIncludeWildcard) return true;\n            subtopicsToMatch = subtopicsToMatch.map((topic)=>topic.toLowerCase());\n            // check each possible matching topic\n            const topicDoesMatch = subtopicsToMatch.includes(logTopic);\n            return topicDoesMatch;\n        });\n        return topicsMatch;\n    }\n}\nmodule.exports = LogFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/log-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/node_modules/pify/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/node_modules/pify/index.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nconst processFn = (fn, options, proxy, unwrapped)=>function(...arguments_) {\n        const P = options.promiseModule;\n        return new P((resolve, reject)=>{\n            if (options.multiArgs) {\n                arguments_.push((...result)=>{\n                    if (options.errorFirst) {\n                        if (result[0]) {\n                            reject(result);\n                        } else {\n                            result.shift();\n                            resolve(result);\n                        }\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else if (options.errorFirst) {\n                arguments_.push((error, result)=>{\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else {\n                arguments_.push(resolve);\n            }\n            const self = this === proxy ? unwrapped : this;\n            Reflect.apply(fn, self, arguments_);\n        });\n    };\nconst filterCache = new WeakMap();\nmodule.exports = (input, options)=>{\n    options = {\n        exclude: [\n            /.+(?:Sync|Stream)$/\n        ],\n        errorFirst: true,\n        promiseModule: Promise,\n        ...options\n    };\n    const objectType = typeof input;\n    if (!(input !== null && (objectType === \"object\" || objectType === \"function\"))) {\n        throw new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? \"null\" : objectType}\\``);\n    }\n    const filter = (target, key)=>{\n        let cached = filterCache.get(target);\n        if (!cached) {\n            cached = {};\n            filterCache.set(target, cached);\n        }\n        if (key in cached) {\n            return cached[key];\n        }\n        const match = (pattern)=>typeof pattern === \"string\" || typeof key === \"symbol\" ? key === pattern : pattern.test(key);\n        const desc = Reflect.getOwnPropertyDescriptor(target, key);\n        const writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;\n        const included = options.include ? options.include.some(match) : !options.exclude.some(match);\n        const shouldFilter = included && writableOrConfigurableOwn;\n        cached[key] = shouldFilter;\n        return shouldFilter;\n    };\n    const cache = new WeakMap();\n    const proxy = new Proxy(input, {\n        apply (target, thisArg, args) {\n            const cached = cache.get(target);\n            if (cached) {\n                return Reflect.apply(cached, thisArg, args);\n            }\n            const pified = options.excludeMain ? target : processFn(target, options, proxy, target);\n            cache.set(target, pified);\n            return Reflect.apply(pified, thisArg, args);\n        },\n        get (target, key) {\n            const property = target[key];\n            // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n            if (!filter(target, key) || property === Function.prototype[key]) {\n                return property;\n            }\n            const cached = cache.get(property);\n            if (cached) {\n                return cached;\n            }\n            if (typeof property === \"function\") {\n                const pified = processFn(property, options, proxy, target);\n                cache.set(property, pified);\n                return pified;\n            }\n            return property;\n        }\n    });\n    return proxy;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/node_modules/pify/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/subscriptionManager.js":
/*!******************************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/subscriptionManager.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js\")[\"default\"]);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./node_modules/json-rpc-engine/dist/index.js\");\nconst createFilterMiddleware = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/index.js\");\nconst { unsafeRandomBytes, incrementHexInt } = __webpack_require__(/*! ./hexUtils.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange.js */ \"(ssr)/./node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n    // state and utilities for handling subscriptions\n    const subscriptions = {};\n    const filterManager = createFilterMiddleware({\n        blockTracker,\n        provider\n    });\n    // internal flag\n    let isDestroyed = false;\n    // create subscriptionManager api object\n    const events = new SafeEventEmitter();\n    const middleware = createScaffoldMiddleware({\n        eth_subscribe: createAsyncMiddleware(subscribe),\n        eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n    });\n    middleware.destroy = destroy;\n    return {\n        events,\n        middleware\n    };\n    async function subscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const subscriptionType = req.params[0];\n        // subId is 16 byte hex string\n        const subId = unsafeRandomBytes(16);\n        // create sub\n        let sub;\n        switch(subscriptionType){\n            case \"newHeads\":\n                sub = createSubNewHeads({\n                    subId\n                });\n                break;\n            case \"logs\":\n                const filterParams = req.params[1];\n                const filter = await filterManager.newLogFilter(filterParams);\n                sub = createSubFromFilter({\n                    subId,\n                    filter\n                });\n                break;\n            default:\n                throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`);\n        }\n        subscriptions[subId] = sub;\n        res.result = subId;\n        return;\n        function createSubNewHeads({ subId }) {\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    blockTracker.removeListener(\"sync\", sub.update);\n                },\n                update: async ({ oldBlock, newBlock })=>{\n                    // for newHeads\n                    const toBlock = newBlock;\n                    const fromBlock = incrementHexInt(oldBlock);\n                    const rawBlocks = await getBlocksForRange({\n                        provider,\n                        fromBlock,\n                        toBlock\n                    });\n                    const results = rawBlocks.map(normalizeBlock).filter((block)=>block !== null);\n                    results.forEach((value)=>{\n                        _emitSubscriptionResult(subId, value);\n                    });\n                }\n            };\n            // check for subscription updates on new block\n            blockTracker.on(\"sync\", sub.update);\n            return sub;\n        }\n        function createSubFromFilter({ subId, filter }) {\n            filter.on(\"update\", (result)=>_emitSubscriptionResult(subId, result));\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    return await filterManager.uninstallFilter(filter.idHex);\n                }\n            };\n            return sub;\n        }\n    }\n    async function unsubscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const id = req.params[0];\n        const subscription = subscriptions[id];\n        // if missing, return \"false\" to indicate it was not removed\n        if (!subscription) {\n            res.result = false;\n            return;\n        }\n        // cleanup subscription\n        delete subscriptions[id];\n        await subscription.destroy();\n        res.result = true;\n    }\n    function _emitSubscriptionResult(filterIdHex, value) {\n        events.emit(\"notification\", {\n            jsonrpc: \"2.0\",\n            method: \"eth_subscription\",\n            params: {\n                subscription: filterIdHex,\n                result: value\n            }\n        });\n    }\n    function destroy() {\n        events.removeAllListeners();\n        for(const id in subscriptions){\n            subscriptions[id].destroy();\n            delete subscriptions[id];\n        }\n        isDestroyed = true;\n    }\n}\nfunction normalizeBlock(block) {\n    if (block === null || block === undefined) {\n        return null;\n    }\n    return {\n        hash: block.hash,\n        parentHash: block.parentHash,\n        sha3Uncles: block.sha3Uncles,\n        miner: block.miner,\n        stateRoot: block.stateRoot,\n        transactionsRoot: block.transactionsRoot,\n        receiptsRoot: block.receiptsRoot,\n        logsBloom: block.logsBloom,\n        difficulty: block.difficulty,\n        number: block.number,\n        gasLimit: block.gasLimit,\n        gasUsed: block.gasUsed,\n        nonce: block.nonce,\n        mixHash: block.mixHash,\n        timestamp: block.timestamp,\n        extraData: block.extraData\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvc3Vic2NyaXB0aW9uTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsbUJBQW1CQywySUFBK0M7QUFDeEUsTUFBTSxFQUFFRSxxQkFBcUIsRUFBRUMsd0JBQXdCLEVBQUUsR0FBR0gsbUJBQU9BLENBQUM7QUFDcEUsTUFBTUkseUJBQXlCSixtQkFBT0EsQ0FBQztBQUN2QyxNQUFNLEVBQUVLLGlCQUFpQixFQUFFQyxlQUFlLEVBQUUsR0FBR04sbUJBQU9BLENBQUM7QUFDdkQsTUFBTU8sb0JBQW9CUCxtQkFBT0EsQ0FBQztBQUVsQ1EsT0FBT0MsT0FBTyxHQUFHQztBQUdqQixTQUFTQSw2QkFBNkIsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUU7SUFDOUQsaURBQWlEO0lBQ2pELE1BQU1DLGdCQUFnQixDQUFDO0lBQ3ZCLE1BQU1DLGdCQUFnQlYsdUJBQXVCO1FBQUVPO1FBQWNDO0lBQVM7SUFFdEUsZ0JBQWdCO0lBQ2hCLElBQUlHLGNBQWM7SUFFbEIsd0NBQXdDO0lBQ3hDLE1BQU1DLFNBQVMsSUFBSWpCO0lBQ25CLE1BQU1rQixhQUFhZCx5QkFBeUI7UUFDMUNlLGVBQWVoQixzQkFBc0JpQjtRQUNyQ0MsaUJBQWlCbEIsc0JBQXNCbUI7SUFDekM7SUFDQUosV0FBV0ssT0FBTyxHQUFHQTtJQUNyQixPQUFPO1FBQUVOO1FBQVFDO0lBQVc7SUFFNUIsZUFBZUUsVUFBVUksR0FBRyxFQUFFQyxHQUFHO1FBRS9CLElBQUlULGFBQWEsTUFBTSxJQUFJVSxNQUN6QjtRQUdGLE1BQU1DLG1CQUFtQkgsSUFBSUksTUFBTSxDQUFDLEVBQUU7UUFDdEMsOEJBQThCO1FBQzlCLE1BQU1DLFFBQVF2QixrQkFBa0I7UUFFaEMsYUFBYTtRQUNiLElBQUl3QjtRQUNKLE9BQVFIO1lBQ04sS0FBSztnQkFDSEcsTUFBTUMsa0JBQWtCO29CQUFFRjtnQkFBTTtnQkFDaEM7WUFDRixLQUFLO2dCQUNILE1BQU1HLGVBQWVSLElBQUlJLE1BQU0sQ0FBQyxFQUFFO2dCQUNsQyxNQUFNSyxTQUFTLE1BQU1sQixjQUFjbUIsWUFBWSxDQUFDRjtnQkFDaERGLE1BQU1LLG9CQUFvQjtvQkFBRU47b0JBQU9JO2dCQUFPO2dCQUMxQztZQUNGO2dCQUNFLE1BQU0sSUFBSVAsTUFBTSxDQUFDLHFEQUFxRCxFQUFFQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRS9GO1FBQ0FiLGFBQWEsQ0FBQ2UsTUFBTSxHQUFHQztRQUV2QkwsSUFBSVcsTUFBTSxHQUFHUDtRQUNiO1FBRUEsU0FBU0Usa0JBQWtCLEVBQUVGLEtBQUssRUFBRTtZQUNsQyxNQUFNQyxNQUFNO2dCQUNWTyxNQUFNVjtnQkFDTkosU0FBUztvQkFDUFgsYUFBYTBCLGNBQWMsQ0FBQyxRQUFRUixJQUFJUyxNQUFNO2dCQUNoRDtnQkFDQUEsUUFBUSxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO29CQUNuQyxlQUFlO29CQUNmLE1BQU1DLFVBQVVEO29CQUNoQixNQUFNRSxZQUFZcEMsZ0JBQWdCaUM7b0JBQ2xDLE1BQU1JLFlBQVksTUFBTXBDLGtCQUFrQjt3QkFBRUs7d0JBQVU4Qjt3QkFBV0Q7b0JBQVE7b0JBQ3pFLE1BQU1HLFVBQVVELFVBQVVFLEdBQUcsQ0FBQ0MsZ0JBQWdCZCxNQUFNLENBQUNlLENBQUFBLFFBQVNBLFVBQVU7b0JBQ3hFSCxRQUFRSSxPQUFPLENBQUMsQ0FBQ0M7d0JBQ2ZDLHdCQUF3QnRCLE9BQU9xQjtvQkFDakM7Z0JBQ0Y7WUFDRjtZQUNBLDhDQUE4QztZQUM5Q3RDLGFBQWF3QyxFQUFFLENBQUMsUUFBUXRCLElBQUlTLE1BQU07WUFDbEMsT0FBT1Q7UUFDVDtRQUVBLFNBQVNLLG9CQUFvQixFQUFFTixLQUFLLEVBQUVJLE1BQU0sRUFBRTtZQUM1Q0EsT0FBT21CLEVBQUUsQ0FBQyxVQUFVaEIsQ0FBQUEsU0FBVWUsd0JBQXdCdEIsT0FBT087WUFDN0QsTUFBTU4sTUFBTTtnQkFDVk8sTUFBTVY7Z0JBQ05KLFNBQVM7b0JBQ1AsT0FBTyxNQUFNUixjQUFjc0MsZUFBZSxDQUFDcEIsT0FBT3FCLEtBQUs7Z0JBQ3pEO1lBQ0Y7WUFDQSxPQUFPeEI7UUFDVDtJQUNGO0lBRUEsZUFBZVIsWUFBWUUsR0FBRyxFQUFFQyxHQUFHO1FBRWpDLElBQUlULGFBQWEsTUFBTSxJQUFJVSxNQUN6QjtRQUdGLE1BQU02QixLQUFLL0IsSUFBSUksTUFBTSxDQUFDLEVBQUU7UUFDeEIsTUFBTTRCLGVBQWUxQyxhQUFhLENBQUN5QyxHQUFHO1FBQ3RDLDREQUE0RDtRQUM1RCxJQUFJLENBQUNDLGNBQWM7WUFDakIvQixJQUFJVyxNQUFNLEdBQUc7WUFDYjtRQUNGO1FBQ0EsdUJBQXVCO1FBQ3ZCLE9BQU90QixhQUFhLENBQUN5QyxHQUFHO1FBQ3hCLE1BQU1DLGFBQWFqQyxPQUFPO1FBQzFCRSxJQUFJVyxNQUFNLEdBQUc7SUFDZjtJQUVBLFNBQVNlLHdCQUF3Qk0sV0FBVyxFQUFFUCxLQUFLO1FBQ2pEakMsT0FBT3lDLElBQUksQ0FBQyxnQkFBZ0I7WUFDMUJDLFNBQVM7WUFDVEMsUUFBUTtZQUNSaEMsUUFBUTtnQkFDTjRCLGNBQWNDO2dCQUNkckIsUUFBUWM7WUFDVjtRQUNGO0lBQ0Y7SUFFQSxTQUFTM0I7UUFDUE4sT0FBTzRDLGtCQUFrQjtRQUN6QixJQUFLLE1BQU1OLE1BQU16QyxjQUFlO1lBQzlCQSxhQUFhLENBQUN5QyxHQUFHLENBQUNoQyxPQUFPO1lBQ3pCLE9BQU9ULGFBQWEsQ0FBQ3lDLEdBQUc7UUFDMUI7UUFDQXZDLGNBQWM7SUFDaEI7QUFDRjtBQUVBLFNBQVMrQixlQUFlQyxLQUFLO0lBQzNCLElBQUlBLFVBQVUsUUFBUUEsVUFBVWMsV0FBVztRQUN6QyxPQUFPO0lBQ1Q7SUFDQSxPQUFPO1FBQ0xDLE1BQU1mLE1BQU1lLElBQUk7UUFDaEJDLFlBQVloQixNQUFNZ0IsVUFBVTtRQUM1QkMsWUFBWWpCLE1BQU1pQixVQUFVO1FBQzVCQyxPQUFPbEIsTUFBTWtCLEtBQUs7UUFDbEJDLFdBQVduQixNQUFNbUIsU0FBUztRQUMxQkMsa0JBQWtCcEIsTUFBTW9CLGdCQUFnQjtRQUN4Q0MsY0FBY3JCLE1BQU1xQixZQUFZO1FBQ2hDQyxXQUFXdEIsTUFBTXNCLFNBQVM7UUFDMUJDLFlBQVl2QixNQUFNdUIsVUFBVTtRQUM1QkMsUUFBUXhCLE1BQU13QixNQUFNO1FBQ3BCQyxVQUFVekIsTUFBTXlCLFFBQVE7UUFDeEJDLFNBQVMxQixNQUFNMEIsT0FBTztRQUN0QkMsT0FBTzNCLE1BQU0yQixLQUFLO1FBQ2xCQyxTQUFTNUIsTUFBTTRCLE9BQU87UUFDdEJDLFdBQVc3QixNQUFNNkIsU0FBUztRQUMxQkMsV0FBVzlCLE1BQU04QixTQUFTO0lBQzVCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLW5leHQtYXBwLy4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL3N1YnNjcmlwdGlvbk1hbmFnZXIuanM/M2YxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTYWZlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlcicpLmRlZmF1bHRcbmNvbnN0IHsgY3JlYXRlQXN5bmNNaWRkbGV3YXJlLCBjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUgfSA9IHJlcXVpcmUoJ2pzb24tcnBjLWVuZ2luZScpXG5jb25zdCBjcmVhdGVGaWx0ZXJNaWRkbGV3YXJlID0gcmVxdWlyZSgnLi9pbmRleC5qcycpXG5jb25zdCB7IHVuc2FmZVJhbmRvbUJ5dGVzLCBpbmNyZW1lbnRIZXhJbnQgfSA9IHJlcXVpcmUoJy4vaGV4VXRpbHMuanMnKVxuY29uc3QgZ2V0QmxvY2tzRm9yUmFuZ2UgPSByZXF1aXJlKCcuL2dldEJsb2Nrc0ZvclJhbmdlLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTdWJzY3JpcHRpb25NaWRkbGV3YXJlXG5cblxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSkge1xuICAvLyBzdGF0ZSBhbmQgdXRpbGl0aWVzIGZvciBoYW5kbGluZyBzdWJzY3JpcHRpb25zXG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB7fVxuICBjb25zdCBmaWx0ZXJNYW5hZ2VyID0gY3JlYXRlRmlsdGVyTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciwgcHJvdmlkZXIgfSlcblxuICAvLyBpbnRlcm5hbCBmbGFnXG4gIGxldCBpc0Rlc3Ryb3llZCA9IGZhbHNlXG5cbiAgLy8gY3JlYXRlIHN1YnNjcmlwdGlvbk1hbmFnZXIgYXBpIG9iamVjdFxuICBjb25zdCBldmVudHMgPSBuZXcgU2FmZUV2ZW50RW1pdHRlcigpXG4gIGNvbnN0IG1pZGRsZXdhcmUgPSBjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUoe1xuICAgIGV0aF9zdWJzY3JpYmU6IGNyZWF0ZUFzeW5jTWlkZGxld2FyZShzdWJzY3JpYmUpLFxuICAgIGV0aF91bnN1YnNjcmliZTogY3JlYXRlQXN5bmNNaWRkbGV3YXJlKHVuc3Vic2NyaWJlKSxcbiAgfSlcbiAgbWlkZGxld2FyZS5kZXN0cm95ID0gZGVzdHJveVxuICByZXR1cm4geyBldmVudHMsIG1pZGRsZXdhcmUgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1YnNjcmliZShyZXEsIHJlcykge1xuXG4gICAgaWYgKGlzRGVzdHJveWVkKSB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU3Vic2NyaXB0aW9uTWFuYWdlciAtIGF0dGVtcHRpbmcgdG8gdXNlIGFmdGVyIGRlc3Ryb3lpbmcnXG4gICAgKVxuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHJlcS5wYXJhbXNbMF1cbiAgICAvLyBzdWJJZCBpcyAxNiBieXRlIGhleCBzdHJpbmdcbiAgICBjb25zdCBzdWJJZCA9IHVuc2FmZVJhbmRvbUJ5dGVzKDE2KVxuXG4gICAgLy8gY3JlYXRlIHN1YlxuICAgIGxldCBzdWJcbiAgICBzd2l0Y2ggKHN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgJ25ld0hlYWRzJzpcbiAgICAgICAgc3ViID0gY3JlYXRlU3ViTmV3SGVhZHMoeyBzdWJJZCB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbG9ncyc6XG4gICAgICAgIGNvbnN0IGZpbHRlclBhcmFtcyA9IHJlcS5wYXJhbXNbMV1cbiAgICAgICAgY29uc3QgZmlsdGVyID0gYXdhaXQgZmlsdGVyTWFuYWdlci5uZXdMb2dGaWx0ZXIoZmlsdGVyUGFyYW1zKVxuICAgICAgICBzdWIgPSBjcmVhdGVTdWJGcm9tRmlsdGVyKHsgc3ViSWQsIGZpbHRlciB9KVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdWJzY3JpcHRpb25NYW5hZ2VyIC0gdW5zdXBwb3J0ZWQgc3Vic2NyaXB0aW9uIHR5cGUgXCIke3N1YnNjcmlwdGlvblR5cGV9XCJgKVxuXG4gICAgfVxuICAgIHN1YnNjcmlwdGlvbnNbc3ViSWRdID0gc3ViXG5cbiAgICByZXMucmVzdWx0ID0gc3ViSWRcbiAgICByZXR1cm5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN1Yk5ld0hlYWRzKHsgc3ViSWQgfSkge1xuICAgICAgY29uc3Qgc3ViID0ge1xuICAgICAgICB0eXBlOiBzdWJzY3JpcHRpb25UeXBlLFxuICAgICAgICBkZXN0cm95OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYmxvY2tUcmFja2VyLnJlbW92ZUxpc3RlbmVyKCdzeW5jJywgc3ViLnVwZGF0ZSlcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlOiBhc3luYyAoeyBvbGRCbG9jaywgbmV3QmxvY2sgfSkgPT4ge1xuICAgICAgICAgIC8vIGZvciBuZXdIZWFkc1xuICAgICAgICAgIGNvbnN0IHRvQmxvY2sgPSBuZXdCbG9ja1xuICAgICAgICAgIGNvbnN0IGZyb21CbG9jayA9IGluY3JlbWVudEhleEludChvbGRCbG9jaylcbiAgICAgICAgICBjb25zdCByYXdCbG9ja3MgPSBhd2FpdCBnZXRCbG9ja3NGb3JSYW5nZSh7IHByb3ZpZGVyLCBmcm9tQmxvY2ssIHRvQmxvY2sgfSlcbiAgICAgICAgICBjb25zdCByZXN1bHRzID0gcmF3QmxvY2tzLm1hcChub3JtYWxpemVCbG9jaykuZmlsdGVyKGJsb2NrID0+IGJsb2NrICE9PSBudWxsKVxuICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIF9lbWl0U3Vic2NyaXB0aW9uUmVzdWx0KHN1YklkLCB2YWx1ZSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBjaGVjayBmb3Igc3Vic2NyaXB0aW9uIHVwZGF0ZXMgb24gbmV3IGJsb2NrXG4gICAgICBibG9ja1RyYWNrZXIub24oJ3N5bmMnLCBzdWIudXBkYXRlKVxuICAgICAgcmV0dXJuIHN1YlxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN1YkZyb21GaWx0ZXIoeyBzdWJJZCwgZmlsdGVyIH0pIHtcbiAgICAgIGZpbHRlci5vbigndXBkYXRlJywgcmVzdWx0ID0+IF9lbWl0U3Vic2NyaXB0aW9uUmVzdWx0KHN1YklkLCByZXN1bHQpKVxuICAgICAgY29uc3Qgc3ViID0ge1xuICAgICAgICB0eXBlOiBzdWJzY3JpcHRpb25UeXBlLFxuICAgICAgICBkZXN0cm95OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGZpbHRlck1hbmFnZXIudW5pbnN0YWxsRmlsdGVyKGZpbHRlci5pZEhleClcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdWJcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiB1bnN1YnNjcmliZShyZXEsIHJlcykge1xuXG4gICAgaWYgKGlzRGVzdHJveWVkKSB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU3Vic2NyaXB0aW9uTWFuYWdlciAtIGF0dGVtcHRpbmcgdG8gdXNlIGFmdGVyIGRlc3Ryb3lpbmcnXG4gICAgKVxuXG4gICAgY29uc3QgaWQgPSByZXEucGFyYW1zWzBdXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc1tpZF1cbiAgICAvLyBpZiBtaXNzaW5nLCByZXR1cm4gXCJmYWxzZVwiIHRvIGluZGljYXRlIGl0IHdhcyBub3QgcmVtb3ZlZFxuICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICByZXMucmVzdWx0ID0gZmFsc2VcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyBjbGVhbnVwIHN1YnNjcmlwdGlvblxuICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW2lkXVxuICAgIGF3YWl0IHN1YnNjcmlwdGlvbi5kZXN0cm95KClcbiAgICByZXMucmVzdWx0ID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gX2VtaXRTdWJzY3JpcHRpb25SZXN1bHQoZmlsdGVySWRIZXgsIHZhbHVlKSB7XG4gICAgZXZlbnRzLmVtaXQoJ25vdGlmaWNhdGlvbicsIHtcbiAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgbWV0aG9kOiAnZXRoX3N1YnNjcmlwdGlvbicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBmaWx0ZXJJZEhleCxcbiAgICAgICAgcmVzdWx0OiB2YWx1ZSxcbiAgICAgIH0sXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnRzLnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgZm9yIChjb25zdCBpZCBpbiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICBzdWJzY3JpcHRpb25zW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW2lkXVxuICAgIH1cbiAgICBpc0Rlc3Ryb3llZCA9IHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVCbG9jayhibG9jaykge1xuICBpZiAoYmxvY2sgPT09IG51bGwgfHwgYmxvY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGFzaDogYmxvY2suaGFzaCxcbiAgICBwYXJlbnRIYXNoOiBibG9jay5wYXJlbnRIYXNoLFxuICAgIHNoYTNVbmNsZXM6IGJsb2NrLnNoYTNVbmNsZXMsXG4gICAgbWluZXI6IGJsb2NrLm1pbmVyLFxuICAgIHN0YXRlUm9vdDogYmxvY2suc3RhdGVSb290LFxuICAgIHRyYW5zYWN0aW9uc1Jvb3Q6IGJsb2NrLnRyYW5zYWN0aW9uc1Jvb3QsXG4gICAgcmVjZWlwdHNSb290OiBibG9jay5yZWNlaXB0c1Jvb3QsXG4gICAgbG9nc0Jsb29tOiBibG9jay5sb2dzQmxvb20sXG4gICAgZGlmZmljdWx0eTogYmxvY2suZGlmZmljdWx0eSxcbiAgICBudW1iZXI6IGJsb2NrLm51bWJlcixcbiAgICBnYXNMaW1pdDogYmxvY2suZ2FzTGltaXQsXG4gICAgZ2FzVXNlZDogYmxvY2suZ2FzVXNlZCxcbiAgICBub25jZTogYmxvY2subm9uY2UsXG4gICAgbWl4SGFzaDogYmxvY2subWl4SGFzaCxcbiAgICB0aW1lc3RhbXA6IGJsb2NrLnRpbWVzdGFtcCxcbiAgICBleHRyYURhdGE6IGJsb2NrLmV4dHJhRGF0YSxcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlNhZmVFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImNyZWF0ZUFzeW5jTWlkZGxld2FyZSIsImNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSIsImNyZWF0ZUZpbHRlck1pZGRsZXdhcmUiLCJ1bnNhZmVSYW5kb21CeXRlcyIsImluY3JlbWVudEhleEludCIsImdldEJsb2Nrc0ZvclJhbmdlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZVN1YnNjcmlwdGlvbk1pZGRsZXdhcmUiLCJibG9ja1RyYWNrZXIiLCJwcm92aWRlciIsInN1YnNjcmlwdGlvbnMiLCJmaWx0ZXJNYW5hZ2VyIiwiaXNEZXN0cm95ZWQiLCJldmVudHMiLCJtaWRkbGV3YXJlIiwiZXRoX3N1YnNjcmliZSIsInN1YnNjcmliZSIsImV0aF91bnN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiZGVzdHJveSIsInJlcSIsInJlcyIsIkVycm9yIiwic3Vic2NyaXB0aW9uVHlwZSIsInBhcmFtcyIsInN1YklkIiwic3ViIiwiY3JlYXRlU3ViTmV3SGVhZHMiLCJmaWx0ZXJQYXJhbXMiLCJmaWx0ZXIiLCJuZXdMb2dGaWx0ZXIiLCJjcmVhdGVTdWJGcm9tRmlsdGVyIiwicmVzdWx0IiwidHlwZSIsInJlbW92ZUxpc3RlbmVyIiwidXBkYXRlIiwib2xkQmxvY2siLCJuZXdCbG9jayIsInRvQmxvY2siLCJmcm9tQmxvY2siLCJyYXdCbG9ja3MiLCJyZXN1bHRzIiwibWFwIiwibm9ybWFsaXplQmxvY2siLCJibG9jayIsImZvckVhY2giLCJ2YWx1ZSIsIl9lbWl0U3Vic2NyaXB0aW9uUmVzdWx0Iiwib24iLCJ1bmluc3RhbGxGaWx0ZXIiLCJpZEhleCIsImlkIiwic3Vic2NyaXB0aW9uIiwiZmlsdGVySWRIZXgiLCJlbWl0IiwianNvbnJwYyIsIm1ldGhvZCIsInJlbW92ZUFsbExpc3RlbmVycyIsInVuZGVmaW5lZCIsImhhc2giLCJwYXJlbnRIYXNoIiwic2hhM1VuY2xlcyIsIm1pbmVyIiwic3RhdGVSb290IiwidHJhbnNhY3Rpb25zUm9vdCIsInJlY2VpcHRzUm9vdCIsImxvZ3NCbG9vbSIsImRpZmZpY3VsdHkiLCJudW1iZXIiLCJnYXNMaW1pdCIsImdhc1VzZWQiLCJub25jZSIsIm1peEhhc2giLCJ0aW1lc3RhbXAiLCJleHRyYURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/subscriptionManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-filters/tx-filter.js":
/*!********************************************************!*\
  !*** ./node_modules/eth-json-rpc-filters/tx-filter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass TxFilter extends BaseFilter {\n    constructor({ provider }){\n        super();\n        this.type = \"tx\";\n        this.provider = provider;\n    }\n    async update({ oldBlock }) {\n        const toBlock = oldBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blocks = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockTxHashes = [];\n        for (const block of blocks){\n            blockTxHashes.push(...block.transactions);\n        }\n        // add to results\n        this.addResults(blockTxHashes);\n    }\n}\nmodule.exports = TxFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvdHgtZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsZUFBZSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRXBDLE1BQU1HLGlCQUFpQko7SUFFckJLLFlBQWEsRUFBRUMsUUFBUSxFQUFFLENBQUU7UUFDekIsS0FBSztRQUNMLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRCxRQUFRLEdBQUdBO0lBQ2xCO0lBRUEsTUFBTUUsT0FBUSxFQUFFQyxRQUFRLEVBQUUsRUFBRTtRQUMxQixNQUFNQyxVQUFVRDtRQUNoQixNQUFNRSxZQUFZUixnQkFBZ0JNO1FBQ2xDLE1BQU1HLFNBQVMsTUFBTVYsa0JBQWtCO1lBQUVJLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQUVLO1lBQVdEO1FBQVE7UUFDckYsTUFBTUcsZ0JBQWdCLEVBQUU7UUFDeEIsS0FBSyxNQUFNQyxTQUFTRixPQUFRO1lBQzFCQyxjQUFjRSxJQUFJLElBQUlELE1BQU1FLFlBQVk7UUFDMUM7UUFDQSxpQkFBaUI7UUFDakIsSUFBSSxDQUFDQyxVQUFVLENBQUNKO0lBQ2xCO0FBRUY7QUFFQUssT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtbmV4dC1hcHAvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvdHgtZmlsdGVyLmpzP2MzYzYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vYmFzZS1maWx0ZXInKVxuY29uc3QgZ2V0QmxvY2tzRm9yUmFuZ2UgPSByZXF1aXJlKCcuL2dldEJsb2Nrc0ZvclJhbmdlJylcbmNvbnN0IHsgaW5jcmVtZW50SGV4SW50IH0gPSByZXF1aXJlKCcuL2hleFV0aWxzJylcblxuY2xhc3MgVHhGaWx0ZXIgZXh0ZW5kcyBCYXNlRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoeyBwcm92aWRlciB9KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudHlwZSA9ICd0eCdcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXJcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZSAoeyBvbGRCbG9jayB9KSB7XG4gICAgY29uc3QgdG9CbG9jayA9IG9sZEJsb2NrXG4gICAgY29uc3QgZnJvbUJsb2NrID0gaW5jcmVtZW50SGV4SW50KG9sZEJsb2NrKVxuICAgIGNvbnN0IGJsb2NrcyA9IGF3YWl0IGdldEJsb2Nrc0ZvclJhbmdlKHsgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsIGZyb21CbG9jaywgdG9CbG9jayB9KVxuICAgIGNvbnN0IGJsb2NrVHhIYXNoZXMgPSBbXVxuICAgIGZvciAoY29uc3QgYmxvY2sgb2YgYmxvY2tzKSB7XG4gICAgICBibG9ja1R4SGFzaGVzLnB1c2goLi4uYmxvY2sudHJhbnNhY3Rpb25zKVxuICAgIH1cbiAgICAvLyBhZGQgdG8gcmVzdWx0c1xuICAgIHRoaXMuYWRkUmVzdWx0cyhibG9ja1R4SGFzaGVzKVxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUeEZpbHRlclxuIl0sIm5hbWVzIjpbIkJhc2VGaWx0ZXIiLCJyZXF1aXJlIiwiZ2V0QmxvY2tzRm9yUmFuZ2UiLCJpbmNyZW1lbnRIZXhJbnQiLCJUeEZpbHRlciIsImNvbnN0cnVjdG9yIiwicHJvdmlkZXIiLCJ0eXBlIiwidXBkYXRlIiwib2xkQmxvY2siLCJ0b0Jsb2NrIiwiZnJvbUJsb2NrIiwiYmxvY2tzIiwiYmxvY2tUeEhhc2hlcyIsImJsb2NrIiwicHVzaCIsInRyYW5zYWN0aW9ucyIsImFkZFJlc3VsdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-filters/tx-filter.js\n");

/***/ })

};
;